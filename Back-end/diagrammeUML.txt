@startuml
class User {
    - firstname: String
    - surname: String
    - email: String
    - password: String
    - connectionMethod: String
    - userId: String
    + constructor(firstname, surname, email, password, connectionMethod, userId)
    + setFirstname(firstname: String)
    + setSurname(surname: String)
    + setEmail(email: String)
    + setPassword(password: String)
    + setConnectionMethod(connectionMethod: String)
    + changePassword(newPassword: String)
    + connect(email: String, password: String): Boolean
    + get firstname(): String
    + get surname(): String
    + get email(): String
    + get password(): String
    + get connectionMethod(): String
    + get userId(): String
}

class Student extends User {
    - credit: Number
    - subscriptionEndDate: Date
    - tickets: Number
    - card: Object
    + constructor(firstname, surname, email, password, connectionMethod, userId, credit)
    + setCredit(credit: Number)
    + setSubscriptionEndDate(subscriptionEndDate: Date)
    + getRemainingSubscriptionDays(): Number
    + addSubscription(months: Number)
    + getCourses(): Array[Course]
    + addLink(courseId: String, link: String)
    + addPlace(type: String, number: Number)
    + paymentsHistory()
    + buy(type: String, number: Number)
}

class Teacher extends User {
    - photo: String
    - description: String
    + constructor(firstname, surname, email, password, connectionMethod, teacherId, photo, description)
    + get listStudent(): Array[Student]
    + saveUser(user: User)
    + getStudent(studentId: String): Student
    + newStudent(firstname: String, surname: String, email: String, password: String, connectionMethod: String, credit: Number)
    + modifyStudent(newFirstname: String, newSurname: String, newEmail: String, newPassword: String, newConnectionMethod: String, newCredit: Number, studentId: String)
    + deleteStudent(studentId: String)
    + searchCourse(name: String, tags: Array[String], period: Date, teacher: String, length: String, type: String): Array[Course]
    + getCourse(courseId: String): Course
    + saveCourse(course: Course)
    + affectStudent(studentID: String, courseID: String)
    + searchStudent(firstname: String, surname: String, email: String): Array[Student]
    + deleteCourse(courseId: String)
    + cancelCourse(courseId: String)
    + addPlaceStudent(studentId: String, type: String, number: Number)
    + getPlaces(period: Date): Array[Place]
    + modifyCourse(courseId: String)
}

class Admin extends User {
    + constructor(firstname: String, surname: String, email: String, password: String, connectionMethod: String, adminId: String)
    + createCard(place: String, price: Number)
    + deleteCard(place: String)
    + createCourse(courseId: String, image: String, title: String, type: String, duration: String, startDate: String, startTime: String, location: String, maxParticipants: Number, paymentType: String, price: Number, paymentOptions: Array[String], isEvening: Boolean, recurrence: Number, teachers: Array[String], links: Array[String], students: Array[String], tags: Array[String])
    + createTeacher(firstname: String, surname: String, email: String, password: String, connectionMethod: String, teacherId: String, photo: String, description: String)
    + getPayments(): Array[Payment]
}

class Course {
    - courseId: String
    - image: String
    - title: String
    - type: String
    - duration: String
    - startDate: Date
    - startTime: String
    - location: String
    - maxParticipants: Number
    - paymentType: String
    - price: Number
    - paymentOptions: Array[String]
    - isEvening: Boolean
    - recurrence: Number
    - teachers: Array[String]
    - links: Array[String]
    - students: Array[String]
    - tags: Array[String]
    + constructor(data: Object)
    + setImage(image: String)
    + setTitle(title: String)
    + setType(type: String)
    + setDuration(duration: String)
    + setStartDate(startDate: String, startTime: String)
    + setLocation(location: String)
    + setMaxParticipants(maxParticipants: Number)
    + setPaymentType(paymentType: String)
    + setPrice(price: Number)
    + setPaymentOptions(paymentOptions: Array[String])
    + setIsEvening(isEvening: Boolean)
    + setRecurrence(recurrence: Number)
    + setTeachers(teachers: Array[String])
    + setLinks(links: Array[String])
    + setStudents(students: Array[String])
    + setTags(tags: Array[String])
    + getCourseId(): String
    + getImage(): String
    + getTitle(): String
    + getType(): String
    + getDuration(): String
    + getStartDate(): Date
    + getLocation(): String
    + getMaxParticipants(): Number
    + getPaymentType(): String
    + getPrice(): Number
    + getPaymentOptions(): Array[String]
    + getIsEvening(): Boolean
    + getRecurrence(): Number
    + getTeachers(): Array[String]
    + getLinks(): Array[String]
    + getStudents(): Array[String]
    + getTags(): Array[String]
    + addStudent(student: Student)
    + removeStudent(student: Student)
    + addLink(link: String)
    + removeLink(link: String)
    + addTag(tag: String)
    + removeTag(tag: String)
    + addTeacher(teacher: Teacher)
    + removeTeacher(teacher: Teacher)
}

User <|-- Student
User <|-- Teacher
User <|-- Admin
Admin --> Course : create
Admin --> Teacher : create
Teacher --> Student : manages
Teacher --> Course : manages
Student --> Course : attends
@enduml